import os
import asyncio
import logging
import datetime
import discord
from discord.ext import commands, tasks
from discord import app_commands, ui, Interaction
import yfinance as yf
import statistics

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("stockbot")

DISCORD_TOKEN = os.environ.get("DISCORD_TOKEN")
GUILD_ID = os.environ.get("GUILD_ID")
DEFAULT_CHANNEL_ID = int(os.environ.get("CHANNEL_ID", 0))

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

user_targets = {}
user_messages = {}
user_dm_preference = {}

def fetch_price(symbol: str):
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="1d", interval="1m")
        if data.empty:
            return None
        return float(data["Close"].iloc[-1])
    except Exception as e:
        logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {symbol}: {e}")
        return None

def fetch_support_resistance(symbol: str):
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="6mo", interval="1d")
        if data.empty:
            return None, None
        closes = data["Close"].tolist()
        mean_price = statistics.mean(closes)
        std_price = statistics.pstdev(closes)
        pivot = (max(closes[-20:]) + min(closes[-20:]) + closes[-1]) / 3
        support = round(pivot - std_price, 2)
        resistance = round(pivot + std_price, 2)
        return support, resistance
    except Exception as e:
        logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {symbol}: {e}")
        return None, None

class StockView(ui.View):
    def __init__(self, user_id: int, symbol: str, target: float):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.symbol = symbol
        self.target = target

    async def interaction_check(self, interaction: Interaction) -> bool:
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True

    @ui.select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", options=[
        discord.SelectOption(label="‡∏™‡πà‡∏á DM", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", emoji="üì©"),
        discord.SelectOption(label="‡∏™‡πà‡∏á Channel", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Channel ‡∏õ‡∏Å‡∏ï‡∏¥", emoji="üì¢")
    ])
    async def notification_method(self, interaction: Interaction, select: ui.Select):
        choice = select.values[0]
        user_dm_preference[self.user_id] = "dm" if choice == "‡∏™‡πà‡∏á DM" else "channel"
        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {choice}", ephemeral=True)

    @ui.button(label="üîÑ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà", style=discord.ButtonStyle.primary)
    async def check_price(self, interaction: Interaction, button: ui.Button):
        price = fetch_price(self.symbol)
        if price is None:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á {self.symbol} ‡πÑ‡∏î‡πâ", ephemeral=True)
            return
        status = "üìâ ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" if price < self.target else "üìà ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
        support, resistance = fetch_support_resistance(self.symbol)
        embed = discord.Embed(title=f"‡∏´‡∏∏‡πâ‡∏ô {self.symbol}", color=0x3498db, timestamp=datetime.datetime.utcnow())
        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{price} ‡∏ö‡∏≤‡∏ó", inline=True)
        embed.add_field(name="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"{self.target} ‡∏ö‡∏≤‡∏ó", inline=True)
        if support and resistance:
            embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
        embed.set_footer(text=status)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @ui.button(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", style=discord.ButtonStyle.secondary)
    async def edit_target(self, interaction: Interaction, button: ui.Button):
        await interaction.response.send_modal(EditTargetModal(self.user_id, self.symbol))

    @ui.button(label="‚ùå ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", style=discord.ButtonStyle.danger)
    async def delete_target(self, interaction: Interaction, button: ui.Button):
        if self.user_id in user_targets and self.symbol in user_targets[self.user_id]:
            del user_targets[self.user_id][self.symbol]
            await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô {self.symbol} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ", ephemeral=True)

    @ui.button(label="üìä ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", style=discord.ButtonStyle.success)
    async def support_resistance(self, interaction: Interaction, button: ui.Button):
        support, resistance = fetch_support_resistance(self.symbol)
        if support is None:
            await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {self.symbol} ‡πÑ‡∏î‡πâ", ephemeral=True)
            return
        embed = discord.Embed(title=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {self.symbol}", description=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", color=0x1abc9c, timestamp=datetime.datetime.utcnow())
        await interaction.response.send_message(embed=embed, ephemeral=True)

class EditTargetModal(ui.Modal, title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô"):
    new_target = ui.TextInput(label="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", style=discord.TextStyle.short)
    def __init__(self, user_id: int, symbol: str):
        super().__init__()
        self.user_id = user_id
        self.symbol = symbol
    async def on_submit(self, interaction: Interaction):
        try:
            value = float(self.new_target.value)
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", ephemeral=True)
            return
        if self.user_id not in user_targets:
            user_targets[self.user_id] = {}
        user_targets[self.user_id][self.symbol] = value
        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.symbol} ‡∏ó‡∏µ‡πà {value} ‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

@tree.command(name="set", description="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK", target="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢")
async def set_target(interaction: Interaction, stock: str, target: float):
    uid = interaction.user.id
    stock = stock.upper()
    if uid not in user_targets:
        user_targets[uid] = {}
    user_targets[uid][stock] = target
    embed = discord.Embed(title="‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", description=f"{interaction.user.mention} ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô **{stock}** ‡∏ó‡∏µ‡πà {target} ‡∏ö‡∏≤‡∏ó", color=0x2ecc71, timestamp=datetime.datetime.utcnow())
    view = StockView(uid, stock, target)
    await interaction.response.send_message(embed=embed, view=view)

@tree.command(name="check", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
@app_commands.describe(stock="‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK")
async def check_stock(interaction: Interaction, stock: str):
    stock = stock.upper()
    price = fetch_price(stock)
    if price is None:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {stock} ‡πÑ‡∏î‡πâ", ephemeral=True)
        return
    uid = interaction.user.id
    target = user_targets.get(uid, {}).get(stock)
    if target:
        status = "üìâ ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" if price < target else "üìà ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
        support, resistance = fetch_support_resistance(stock)
        embed = discord.Embed(title=f"‡∏´‡∏∏‡πâ‡∏ô {stock}", color=0x3498db, timestamp=datetime.datetime.utcnow())
        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{price} ‡∏ö‡∏≤‡∏ó", inline=True)
        embed.add_field(name="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"{target} ‡∏ö‡∏≤‡∏ó", inline=True)
        if support and resistance:
            embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
        embed.set_footer(text=status)
        view = StockView(uid, stock, target)
        await interaction.response.send_message(embed=embed, view=view)
    else:
        embed = discord.Embed(title=f"‡∏´‡∏∏‡πâ‡∏ô {stock}", description=f"‡∏£‡∏≤‡∏Ñ‡∏≤: {price} ‡∏ö‡∏≤‡∏ó\n(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢)", color=0x95a5a6, timestamp=datetime.datetime.utcnow())
        await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="targets", description="‡∏î‡∏π‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def show_targets(interaction: Interaction):
    uid = interaction.user.id
    targets = user_targets.get(uid, {})
    if not targets:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏î ‡πÜ", ephemeral=True)
        return
    msg = "üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n"
    for s, t in targets.items():
        msg += f"- {s}: {t} ‡∏ö‡∏≤‡∏ó\n"
    await interaction.response.send_message(msg, ephemeral=True)

@tree.command(name="delete", description="‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
async def delete_target_cmd(interaction: Interaction, stock: str):
    uid = interaction.user.id
    stock = stock.upper()
    if uid in user_targets and stock in user_targets[uid]:
        del user_targets[uid][stock]
        await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô {stock} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ", ephemeral=True)

@tree.command(name="support", description="‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö")
async def support_cmd(interaction: Interaction, stock: str):
    stock = stock.upper()
    support, _ = fetch_support_resistance(stock)
    if support is None:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö {stock} ‡πÑ‡∏î‡πâ", ephemeral=True)
        return
    await interaction.response.send_message(f"üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö {stock} ‚âà {support} ‡∏ö‡∏≤‡∏ó", ephemeral=True)

@tree.command(name="resistance", description="‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô")
async def resistance_cmd(interaction: Interaction, stock: str):
    stock = stock.upper()
    _, resistance = fetch_support_resistance(stock)
    if resistance is None:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {stock} ‡πÑ‡∏î‡πâ", ephemeral=True)
        return
    await interaction.response.send_message(f"üìà ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {stock} ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", ephemeral=True)

@tasks.loop(minutes=5)
async def auto_check():
    for uid, targets in list(user_targets.items()):
        for stock, target in list(targets.items()):
            price = fetch_price(stock)
            if price is None:
                continue
            if price <= target:
                try:
                    user = await bot.fetch_user(uid)
                    if user is None:
                        continue
                    old_msg = user_messages.get((uid, stock))
                    if old_msg:
                        try:
                            await old_msg.delete()
                        except:
                            pass
                    support, resistance = fetch_support_resistance(stock)
                    embed = discord.Embed(title="üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô", color=0xe67e22, timestamp=datetime.datetime.utcnow())
                    embed.add_field(name="‡∏´‡∏∏‡πâ‡∏ô", value=stock, inline=True)
                    embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤", value=f"{price} ‡∏ö‡∏≤‡∏ó", inline=True)
                    embed.add_field(name="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"{target} ‡∏ö‡∏≤‡∏ó", inline=True)
                    if support and resistance:
                        embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
                    view = StockView(uid, stock, target)
                    method = user_dm_preference.get(uid, "dm")
                    if method == "dm":
                        sent = await user.send(embed=embed, view=view)
                    else:
                        channel = bot.get_channel(DEFAULT_CHANNEL_ID)
                        if channel:
                            sent = await channel.send(embed=embed, view=view)
                        else:
                            continue
                    user_messages[(uid, stock)] = sent
                except Exception as e:
                    logger.warning(f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {stock} ‡πÉ‡∏´‡πâ {uid} ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

@bot.event
async def on_ready():
    try:
        if GUILD_ID:
            guild = discord.Object(id=int(GUILD_ID))
            await tree.sync(guild=guild)
            logger.info("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        else:
            await tree.sync()
            logger.info("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö Global")
    except Exception as e:
        logger.error(f"‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    auto_check.start()
    logger.info("‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ")

if __name__ == "__main__":
    if not DISCORD_TOKEN:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DISCORD_TOKEN ‡πÉ‡∏ô Secrets/Environment Variables")
    else:
        bot.run(DISCORD_TOKEN)
