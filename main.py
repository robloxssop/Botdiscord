import os
import discord
from discord.ext import tasks, commands
import requests

# ====== ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ======
FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
DISCORD_TOKEN = os.environ.get("DISCORD_TOKEN")
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "0"))

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {user_id: {"AAPL": 170, "TSLA": 200}}
user_targets: dict[int, dict[str, float]] = {}

# ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ======
def get_stock_price(symbol: str) -> float | None:
    url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={FINNHUB_API_KEY}"
    try:
        data = requests.get(url, timeout=10).json()
        return data.get("c")
    except Exception as e:
        print("API error:", e)
        return None

# ====== Loop ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ======
@tasks.loop(minutes=5)
async def check_stocks():
    print("‚è≥ Checking stocks...")
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        print("‚ö†Ô∏è Channel ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    for user_id, stocks in user_targets.items():
        for symbol, target in stocks.items():
            price = get_stock_price(symbol)
            if price is None:
                continue
            if price <= target:  # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤
                user = await bot.fetch_user(user_id)
                await channel.send(f"‚ö†Ô∏è {user.mention} ‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {target}")

# ====== ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ======
@bot.command(name="set")
async def settarget(ctx, symbol: str, target: float):
    symbol = symbol.upper()
    if ctx.author.id not in user_targets:
        user_targets[ctx.author.id] = {}
    user_targets[ctx.author.id][symbol] = target
    await ctx.send(f"‚úÖ {ctx.author.mention} ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏ó‡∏µ‡πà {target} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

@bot.command(name="all")
async def showtargets(ctx):
    targets = user_targets.get(ctx.author.id, {})
    if not targets:
        await ctx.send("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏•‡∏¢")
        return
    msg = "üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:\n"
    for symbol, target in targets.items():
        msg += f"- {symbol}: {target}\n"
    await ctx.send(msg)

@bot.command(name="check")
async def checkstock(ctx, symbol: str):
    symbol = symbol.upper()
    price = get_stock_price(symbol)
    if price is None:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á {symbol}")
        return
    target = user_targets.get(ctx.author.id, {}).get(symbol)
    if target:
        if price <= target:
            await ctx.send(f"‚ö†Ô∏è ‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤ {target}")
        else:
            await ctx.send(f"‚úÖ ‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} ‡∏¢‡∏±‡∏á‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤ {target}")
    else:
        await ctx.send(f"üíπ ‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ {price} (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤)")

@bot.command(name="remove")
async def removetarget(ctx, symbol: str):
    symbol = symbol.upper()
    if ctx.author.id in user_targets and symbol in user_targets[ctx.author.id]:
        del user_targets[ctx.author.id][symbol]
        await ctx.send(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ {symbol} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ")

# ====== Start ======
@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    check_stocks.start()

if DISCORD_TOKEN:
    bot.run(DISCORD_TOKEN)
else:
    print("‚ùå DISCORD_TOKEN ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
