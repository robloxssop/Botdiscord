import os
import asyncio
import logging
import datetime
import discord
from discord.ext import commands, tasks
from discord import app_commands, ui, Interaction, embeds
import yfinance as yf
import statistics
import concurrent.futures

# --- Setup Logging ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("stockbot")

# --- Environment Variables ---
DISCORD_TOKEN = os.environ.get("DISCORD_TOKEN")
GUILD_ID = os.environ.get("GUILD_ID")
DEFAULT_CHANNEL_ID = int(os.environ.get("CHANNEL_ID", 0))

# --- Global Data Storage (Consider a database for persistence) ---
# Store trigger_type along with target price
# {user_id: {symbol: {'target': float, 'trigger_type': 'below' | 'above'}}}
user_targets = {}
user_messages = {}
user_dm_preference = {}

# --- Asynchronous Wrappers for Blocking I/O ---
executor = concurrent.futures.ThreadPoolExecutor(max_workers=5)

async def async_fetch_price(symbol: str):
    loop = asyncio.get_running_loop()
    try:
        return await loop.run_in_executor(executor, fetch_price_blocking, symbol)
    except Exception as e:
        logger.error(f"Error fetching price for {symbol}: {e}")
        return None

def fetch_price_blocking(symbol: str):
    """Blocking function to fetch a stock's current price."""
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="1d", interval="1m")
        if data.empty:
            return None
        return float(data["Close"].iloc[-1])
    except Exception as e:
        logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {symbol}: {e}")
        return None

async def async_fetch_support_resistance(symbol: str):
    loop = asyncio.get_running_loop()
    try:
        return await loop.run_in_executor(executor, fetch_support_resistance_blocking, symbol)
    except Exception as e:
        logger.error(f"Error fetching support/resistance for {symbol}: {e}")
        return None, None

def fetch_support_resistance_blocking(symbol: str):
    """Blocking function to fetch a stock's support and resistance levels."""
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="6mo", interval="1d")
        if data.empty:
            return None, None
        closes = data["Close"].tolist()
        if not closes:
            return None, None
        mean_price = statistics.mean(closes)
        std_price = statistics.pstdev(closes)
        pivot = (max(closes[-20:]) + min(closes[-20:]) + closes[-1]) / 3
        support = round(pivot - std_price, 2)
        resistance = round(pivot + std_price, 2)
        return support, resistance
    except Exception as e:
        logger.warning(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {symbol}: {e}")
        return None, None

# --- Custom Views and Modals ---

class StockView(ui.View):
    def __init__(self, user_id: int, symbol: str, target_data: dict):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.symbol = symbol
        self.target = target_data.get('target')
        self.trigger_type = target_data.get('trigger_type', 'below')

    async def interaction_check(self, interaction: Interaction) -> bool:
        if interaction.user.id != self.user_id:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ", ephemeral=True)
            return False
        return True

    @ui.select(placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", options=[
        discord.SelectOption(label="‡∏™‡πà‡∏á DM", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", emoji="üì©"),
        discord.SelectOption(label="‡∏™‡πà‡∏á Channel", description="‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Channel ‡∏õ‡∏Å‡∏ï‡∏¥", emoji="üì¢")
    ])
    async def notification_method(self, interaction: Interaction, select: ui.Select):
        choice = select.values[0]
        user_dm_preference[self.user_id] = "dm" if choice == "‡∏™‡πà‡∏á DM" else "channel"
        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {choice}", ephemeral=True)

    @ui.button(label="üîÑ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà", style=discord.ButtonStyle.primary)
    async def check_price(self, interaction: Interaction, button: ui.Button):
        await interaction.response.defer(ephemeral=True)
        price = await async_fetch_price(self.symbol)
        if price is None:
            await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á **{self.symbol}** ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
            return
        
        status = "üìà ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" if price >= self.target else "üìâ ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
        support, resistance = await async_fetch_support_resistance(self.symbol)
        
        embed = discord.Embed(
            title=f"‡∏´‡∏∏‡πâ‡∏ô {self.symbol}",
            color=0x3498db,
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"**{price}** ‡∏ö‡∏≤‡∏ó", inline=True)
        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"**{self.target}** ‡∏ö‡∏≤‡∏ó", inline=True)
        embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=f"{'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢' if self.trigger_type == 'below' else '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}", inline=False)
        if support and resistance:
            embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
        embed.set_footer(text=f"{status} | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å yfinance")
        await interaction.followup.send(embed=embed, ephemeral=True)

    @ui.button(label="‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", style=discord.ButtonStyle.secondary)
    async def edit_target(self, interaction: Interaction, button: ui.Button):
        await interaction.response.send_modal(EditTargetModal(self.user_id, self.symbol))

    @ui.button(label="‚ùå ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", style=discord.ButtonStyle.danger)
    async def delete_target(self, interaction: Interaction, button: ui.Button):
        if self.user_id in user_targets and self.symbol in user_targets[self.user_id]:
            del user_targets[self.user_id][self.symbol]
            await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô **{self.symbol}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ", ephemeral=True)

    @ui.button(label="üìä ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", style=discord.ButtonStyle.success)
    async def support_resistance(self, interaction: Interaction, button: ui.Button):
        await interaction.response.defer(ephemeral=True)
        support, resistance = await async_fetch_support_resistance(self.symbol)
        if support is None:
            await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô **{self.symbol}** ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
            return
        
        embed = discord.Embed(
            title=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô {self.symbol}",
            description=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà **{support}** ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà **{resistance}** ‡∏ö‡∏≤‡∏ó",
            color=0x1abc9c,
            timestamp=datetime.datetime.now(datetime.timezone.utc)
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

class EditTargetModal(ui.Modal, title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô"):
    new_target = ui.TextInput(label="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", style=discord.TextStyle.short, placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
    new_trigger_type = ui.TextInput(label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (below/above)", style=discord.TextStyle.short, default="below")
    
    def __init__(self, user_id: int, symbol: str):
        super().__init__()
        self.user_id = user_id
        self.symbol = symbol
        
    async def on_submit(self, interaction: Interaction):
        try:
            value = float(self.new_target.value)
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return
        
        trigger = self.new_trigger_type.value.lower()
        if trigger not in ['below', 'above']:
            await interaction.response.send_message("‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ 'below' ‡∏´‡∏£‡∏∑‡∏≠ 'above'", ephemeral=True)
            return

        if self.user_id not in user_targets:
            user_targets[self.user_id] = {}
        user_targets[self.user_id][self.symbol] = {'target': value, 'trigger_type': trigger}
        
        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö **{self.symbol}** ‡∏ó‡∏µ‡πà **{value}** ‡∏ö‡∏≤‡∏ó (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ {trigger}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

# --- Bot Class and Commands ---
class StockBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        super().__init__(command_prefix="!", intents=intents)

    async def on_ready(self):
        try:
            if GUILD_ID:
                guild = discord.Object(id=int(GUILD_ID))
                self.tree.copy_global_to(guild=guild)
                await self.tree.sync(guild=guild)
                logger.info("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
            else:
                await self.tree.sync()
                logger.info("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Slash ‡∏ñ‡∏π‡∏Å‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÅ‡∏ö‡∏ö Global")
        except Exception as e:
            logger.error(f"‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        
        self.auto_check.start()
        logger.info(f"‡∏ö‡∏≠‡∏ó {self.user.name} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 5 ‡∏ô‡∏≤‡∏ó‡∏µ")

    @tasks.loop(minutes=5)
    async def auto_check(self):
        logger.info("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...")
        for uid, targets in list(user_targets.items()):
            for stock, data in list(targets.items()):
                target = data.get('target')
                trigger_type = data.get('trigger_type', 'below')
                
                price = await async_fetch_price(stock)
                if price is None:
                    continue
                
                should_notify = False
                if trigger_type == 'below' and price <= target:
                    should_notify = True
                elif trigger_type == 'above' and price >= target:
                    should_notify = True
                
                if should_notify:
                    try:
                        user = await self.fetch_user(uid)
                        if user is None:
                            continue
                        
                        old_msg = user_messages.get((uid, stock))
                        if old_msg:
                            try:
                                await old_msg.delete()
                            except (discord.NotFound, discord.Forbidden):
                                logger.info(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß): {uid}, {stock}")
                                pass
                        
                        support, resistance = await async_fetch_support_resistance(stock)
                        
                        embed = discord.Embed(
                            title="üì¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
                            color=0xe67e22,
                            timestamp=datetime.datetime.now(datetime.timezone.utc)
                        )
                        embed.add_field(name="‡∏´‡∏∏‡πâ‡∏ô", value=f"**{stock}**", inline=True)
                        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"**{price}** ‡∏ö‡∏≤‡∏ó", inline=True)
                        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"**{target}** ‡∏ö‡∏≤‡∏ó", inline=True)
                        embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=f"{'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢' if trigger_type == 'below' else '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}", inline=False)
                        if support and resistance:
                            embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
                        
                        view = StockView(uid, stock, data)
                        method = user_dm_preference.get(uid, "dm")
                        
                        sent_message = None
                        if method == "dm":
                            sent_message = await user.send(embed=embed, view=view)
                        else:
                            channel = self.get_channel(DEFAULT_CHANNEL_ID)
                            if channel:
                                sent_message = await channel.send(f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {user.mention}", embed=embed, view=view)
                            else:
                                logger.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö channel ID: {DEFAULT_CHANNEL_ID}")
                                continue
                        
                        if sent_message:
                            user_messages[(uid, stock)] = sent_message
                            logger.info(f"‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stock} ‡∏ñ‡∏∂‡∏á {user.name} ‡πÅ‡∏•‡πâ‡∏ß")

                    except Exception as e:
                        logger.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {stock} ‡∏ñ‡∏∂‡∏á {uid}: {e}")

# --- Slash Command Group ---
stock_group = app_commands.Group(name="stock", description="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô")

@stock_group.command(name="set", description="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK", target="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", trigger_type="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ('below' ‡∏´‡∏£‡∏∑‡∏≠ 'above', ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏∑‡∏≠ below)")
@app_commands.choices(trigger_type=[
    app_commands.Choice(name="‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value="below"),
    app_commands.Choice(name="‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value="above")
])
async def set_target_cmd(interaction: Interaction, stock: str, target: float, trigger_type: str = 'below'):
    uid = interaction.user.id
    stock = stock.upper()
    
    price = await async_fetch_price(stock)
    if price is None:
        await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ä‡∏∑‡πà‡∏≠ **{stock}** ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
        return

    if uid not in user_targets:
        user_targets[uid] = {}
    
    user_targets[uid][stock] = {'target': target, 'trigger_type': trigger_type}
    
    embed = discord.Embed(
        title="‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description=f"{interaction.user.mention} ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô **{stock}**",
        color=0x2ecc71,
        timestamp=datetime.datetime.now(datetime.timezone.utc)
    )
    embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"**{target}** ‡∏ö‡∏≤‡∏ó", inline=True)
    embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=f"{'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢' if trigger_type == 'below' else '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}", inline=True)

    view = StockView(uid, stock, user_targets[uid][stock])
    await interaction.response.send_message(embed=embed, view=view)

@stock_group.command(name="check", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK")
async def check_stock_cmd(interaction: Interaction, stock: str):
    await interaction.response.defer(ephemeral=True)
    stock = stock.upper()
    price = await async_fetch_price(stock)
    
    if price is None:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô **{stock}** ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
        return
    
    uid = interaction.user.id
    target_data = user_targets.get(uid, {}).get(stock)
    
    embed = discord.Embed(
        title=f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {stock}",
        color=0x3498db,
        timestamp=datetime.datetime.now(datetime.timezone.utc)
    )
    embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"**{price}** ‡∏ö‡∏≤‡∏ó", inline=True)
    
    if target_data:
        target = target_data['target']
        trigger_type = target_data['trigger_type']
        
        status = "üìà ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢" if price >= target else "üìâ ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"
        support, resistance = await async_fetch_support_resistance(stock)
        
        embed.add_field(name="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"**{target}** ‡∏ö‡∏≤‡∏ó", inline=True)
        embed.add_field(name="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value=f"{'‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢' if trigger_type == 'below' else '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤/‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢'}", inline=False)
        
        if support and resistance:
            embed.add_field(name="‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö/‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô", value=f"‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô ‚âà {resistance} ‡∏ö‡∏≤‡∏ó", inline=False)
        embed.set_footer(text=f"{status} | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å yfinance")
        view = StockView(uid, stock, target_data)
        await interaction.followup.send(embed=embed, view=view, ephemeral=True)
    else:
        embed.description = f"**‡∏£‡∏≤‡∏Ñ‡∏≤: {price} ‡∏ö‡∏≤‡∏ó**\n(‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ)"
        embed.color = 0x95a5a6
        await interaction.followup.send(embed=embed, ephemeral=True)

@stock_group.command(name="list", description="‡∏î‡∏π‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
async def show_targets_cmd(interaction: Interaction):
    uid = interaction.user.id
    targets = user_targets.get(uid, {})
    if not targets:
        await interaction.response.send_message("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏î ‡πÜ", ephemeral=True)
        return
        
    embed = discord.Embed(
        title="üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        description="‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ:",
        color=0x3498db
    )
    for s, data in targets.items():
        trigger_text = '‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö' if data['trigger_type'] == 'below' else '‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö'
        embed.add_field(name=f"‡∏´‡∏∏‡πâ‡∏ô {s}", value=f"‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: **{data['target']}** ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ {trigger_text} ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", inline=False)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@stock_group.command(name="delete", description="‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö")
async def delete_target_cmd(interaction: Interaction, stock: str):
    uid = interaction.user.id
    stock = stock.upper()
    
    if uid in user_targets and stock in user_targets[uid]:
        del user_targets[uid][stock]
        await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô **{stock}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ", ephemeral=True)

@stock_group.command(name="support", description="‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö")
async def support_cmd(interaction: Interaction, stock: str):
    await interaction.response.defer(ephemeral=True)
    stock = stock.upper()
    support, _ = await async_fetch_support_resistance(stock)
    
    if support is None:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö **{stock}** ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
        return
        
    await interaction.followup.send(f"üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö **{stock}** ‚âà **{support}** ‡∏ö‡∏≤‡∏ó", ephemeral=True)

@stock_group.command(name="resistance", description="‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô")
async def resistance_cmd(interaction: Interaction, stock: str):
    await interaction.response.defer(ephemeral=True)
    stock = stock.upper()
    _, resistance = await async_fetch_support_resistance(stock)
    
    if resistance is None:
        await interaction.followup.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô **{stock}** ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", ephemeral=True)
        return
        
    await interaction.followup.send(f"üìà ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô **{stock}** ‚âà **{resistance}** ‡∏ö‡∏≤‡∏ó", ephemeral=True)


if __name__ == "__main__":
    if not DISCORD_TOKEN:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ DISCORD_TOKEN ‡πÉ‡∏ô Secrets/Environment Variables")
    else:
        bot = StockBot()
        bot.tree.add_command(stock_group)
        bot.run(DISCORD_TOKEN)
