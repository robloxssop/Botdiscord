import discord
from discord import app_commands
from discord.ext import tasks
import yfinance as yf
import asyncio
import json
import logging
import os

# Logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("stockbot")

# Discord token
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN", "‡πÉ‡∏™‡πà‡πÇ‡∏ó‡πÄ‡∏Ñ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì")
DATA_FILE = "targets.json"

intents = discord.Intents.default()
intents.message_content = False
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
targets = {}

# ‡πÇ‡∏´‡∏•‡∏î/‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def load_data():
    global targets
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                targets = json.load(f)
            logger.info("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            logger.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            targets = {}
    else:
        targets = {}

def save_data():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(targets, f, indent=4, ensure_ascii=False)
    except Exception as e:
        logger.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# ================== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô ==================
def get_price(symbol: str):
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="1d")
        if data.empty:
            return None
        return float(data["Close"].iloc[-1])
    except Exception as e:
        logger.error(f"‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

# ================== ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô ==================
def calc_pro_support(symbol: str):
    try:
        ticker = yf.Ticker(symbol)
        data = ticker.history(period="60d")
        if data.empty or len(data) < 20:
            return None

        # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏ß‡∏á
        low5 = data["Low"][-5:].min()
        low10 = data["Low"][-10:].min()
        low20 = data["Low"][-20:].min()

        # Moving Average
        ma5 = data["Close"][-5:].mean()
        ma10 = data["Close"][-10:].mean()
        ma20 = data["Close"][-20:].mean()
        ma50 = data["Close"][-50:].mean() if len(data) >= 50 else ma20

        # Volatility
        std20 = data["Close"][-20:].std()
        current_price = data["Close"][-1]
        vol_factor = std20 / current_price

        # Trend factor
        trend_up = ma20 > ma50
        trend_factor = 0.01 if trend_up else -0.01

        # Gap / Candle analysis
        last_candle_drop = (data["Close"][-1] - data["Open"][-1]) / data["Open"][-1]
        gap_factor = 0.01 if last_candle_drop < -0.02 else 0

        # Weighted support
        weighted_low = (low5*0.4 + low10*0.3 + low20*0.3)
        support = weighted_low * (1 - vol_factor*0.5 + trend_factor - gap_factor)

        return round(support, 2)
    except Exception as e:
        logger.error(f"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö {symbol} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return None

# ================== Slash Commands ==================
@tree.command(name="set", description="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô")
@app_commands.describe(stock="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK", target="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", dm="‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏≤‡∏á DM ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
async def set_stock(interaction: discord.Interaction, stock: str, target: float, dm: bool = False):
    user_id = str(interaction.user.id)
    if user_id not in targets:
        targets[user_id] = {}
    targets[user_id][stock.upper()] = {"target": target, "dm": dm}
    save_data()
    await interaction.response.send_message(
        f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô `{stock.upper()}` ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {target} ‡∏ö‡∏≤‡∏ó ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! "
        + ("(‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á DM)" if dm else "(‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó)"),
        ephemeral=True
    )

@tree.command(name="check", description="‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÑ‡∏ß‡πâ")
async def check_stocks(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    if user_id not in targets or not targets[user_id]:
        await interaction.response.send_message("‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô", ephemeral=True)
        return
    embed = discord.Embed(title="üìä ‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°", color=discord.Color.blue())
    for stock, info in targets[user_id].items():
        price = get_price(stock)
        support = calc_pro_support(stock)
        if price:
            msg = f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: {info['target']} | üí∞ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {price:.2f}"
            if support:
                msg += f" | üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö: {support}"
            embed.add_field(name=f"{stock}", value=msg, inline=False)
        else:
            embed.add_field(name=f"{stock}", value="‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ", inline=False)
    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="all", description="‡∏î‡∏π‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô")
async def all_stocks(interaction: discord.Interaction):
    if not targets:
        await interaction.response.send_message("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏•‡∏¢", ephemeral=True)
        return
    embed = discord.Embed(title="üì¢ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", color=discord.Color.green())
    for user_id, stocks in targets.items():
        user = await bot.fetch_user(int(user_id))
        for stock, info in stocks.items():
            embed.add_field(
                name=f"{stock} (‡πÇ‡∏î‡∏¢ {user.display_name})",
                value=f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤: {info['target']} | DM: {'‚úÖ' if info['dm'] else '‚ùå'}",
                inline=False
            )
    await interaction.response.send_message(embed=embed, ephemeral=True)

# ================== ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö/‡πÄ‡∏ä‡πá‡∏Ñ/‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ==================
class StockButtons(discord.ui.View):
    def __init__(self, stock, user_id):
        super().__init__(timeout=None)
        self.stock = stock
        self.user_id = user_id

    @discord.ui.button(label="üìä ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤", style=discord.ButtonStyle.primary)
    async def check_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        price = get_price(self.stock)
        support = calc_pro_support(self.stock)
        msg = f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á `{self.stock}` = {price:.2f}" if price else "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ"
        if support:
            msg += f" | üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support}"
        await interaction.response.send_message(msg, ephemeral=True)

    @discord.ui.button(label="‚ùå ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤", style=discord.ButtonStyle.danger)
    async def delete_btn(self, interaction: discord.Interaction, button: discord.ui.Button):
        user_id = str(interaction.user.id)
        if user_id in targets and self.stock in targets[user_id]:
            del targets[user_id][self.stock]
            save_data()
            await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á `{self.stock}` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ", ephemeral=True)

# ================== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ ==================
@tasks.loop(minutes=5)
async def check_loop():
    if not targets:
        return
    logger.info(f"‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‚Äî users={len(targets)}")
    for user_id, stocks in list(targets.items()):
        user = await bot.fetch_user(int(user_id))
        for stock, info in list(stocks.items()):
            price = get_price(stock)
            support = calc_pro_support(stock)
            if price is None:
                continue
            if price <= info["target"]:
                try:
                    if info["dm"]:
                        msg_channel = await user.create_dm()
                    else:
                        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á DM, ‡∏™‡πà‡∏á‡πÉ‡∏ô channel default (‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ)
                        msg_channel = None
                    content = f"üì¢ <@{user_id}> ‡∏´‡∏∏‡πâ‡∏ô `{stock}` ‡∏ñ‡∏∂‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\nüí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {price:.2f}"
                    if support:
                        content += f" | üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö ‚âà {support}"
                    view = StockButtons(stock, user_id)
                    if msg_channel:
                        await msg_channel.send(content, view=view)
                    else:
                        logger.info(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á Channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {user_id}")
                except Exception as e:
                    logger.error(f"‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô {stock} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# ================== Bot Ready ==================
@bot.event
async def on_ready():
    load_data()
    await tree.sync()
    check_loop.start()
    logger.info("üìà ‡∏ö‡∏≠‡∏ó‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‚Äî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ")

# ================== Run Bot ==================
bot.run(DISCORD_TOKEN)
