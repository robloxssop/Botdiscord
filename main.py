import os
import json
import asyncio
import discord
from discord.ext import tasks, commands
import requests
from datetime import datetime, timedelta
import logging
from typing import Optional, Dict, List
import aiohttp

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuration
FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")
DISCORD_TOKEN = os.environ.get("DISCORD_TOKEN")
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "0"))
DATA_FILE = os.environ.get("DATA_FILE", "stock_data.json")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# Data structures
user_targets: Dict[int, Dict[str, Dict]] = {}
user_settings: Dict[int, Dict] = {}
last_alerts: Dict[int, Dict[str, discord.Message]] = {}
stock_cache: Dict[str, Dict] = {}
alert_history: List[Dict] = []

def load_data():
    """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
    global user_targets, user_settings, alert_history
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                user_targets = {int(k): v for k, v in data.get('targets', {}).items()}
                user_settings = {int(k): v for k, v in data.get('settings', {}).items()}
                alert_history = data.get('history', [])
                logger.info(f"üìÅ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(user_targets)} users")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

def save_data():
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
    try:
        data = {
            'targets': {str(k): v for k, v in user_targets.items()},
            'settings': {str(k): v for k, v in user_settings.items()},
            'history': alert_history[-1000:]  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 1000 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        }
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        logger.info("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except Exception as e:
        logger.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

def get_user_settings(user_id: int) -> Dict:
    """‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á user"""
    if user_id not in user_settings:
        user_settings[user_id] = {
            'check_interval': 5,  # ‡∏ô‡∏≤‡∏ó‡∏µ
            'notifications': True,
            'timezone': 'UTC'
        }
    return user_settings[user_id]

async def get_stock_price(symbol: str) -> Optional[Dict]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏≤‡∏Å API ‡∏û‡∏£‡πâ‡∏≠‡∏° cache"""
    try:
        # Check cache (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
        if symbol in stock_cache:
            cache_time = stock_cache[symbol].get('timestamp', 0)
            if datetime.now().timestamp() - cache_time < 300:  # 5 minutes
                return stock_cache[symbol]

        async with aiohttp.ClientSession() as session:
            url = f"https://finnhub.io/api/v1/quote?symbol={symbol}&token={FINNHUB_API_KEY}"
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get('c') is not None:
                        result = {
                            'symbol': symbol,
                            'current': data.get('c'),
                            'high': data.get('h'),
                            'low': data.get('l'),
                            'open': data.get('o'),
                            'previous_close': data.get('pc'),
                            'change': data.get('c', 0) - data.get('pc', 0),
                            'change_percent': ((data.get('c', 0) - data.get('pc', 0)) / data.get('pc', 1)) * 100,
                            'timestamp': datetime.now().timestamp()
                        }
                        stock_cache[symbol] = result
                        return result
    except Exception as e:
        logger.error(f"‚ùå API error for {symbol}: {e}")
    return None

def create_stock_embed(stock_data: Dict, target: Optional[float] = None) -> discord.Embed:
    """‡∏™‡∏£‡πâ‡∏≤‡∏á embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô"""
    symbol = stock_data['symbol']
    current = stock_data['current']
    change = stock_data['change']
    change_percent = stock_data['change_percent']
    
    # ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    color = discord.Color.green() if change >= 0 else discord.Color.red()
    
    embed = discord.Embed(
        title=f"üìà {symbol}",
        color=color,
        timestamp=datetime.now()
    )
    
    embed.add_field(name="üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô", value=f"${current:.2f}", inline=True)
    
    change_emoji = "üìà" if change >= 0 else "üìâ"
    embed.add_field(
        name=f"{change_emoji} ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á", 
        value=f"{change:+.2f} ({change_percent:+.2f}%)", 
        inline=True
    )
    
    if target:
        target_emoji = "‚ö†Ô∏è" if current <= target else "‚úÖ"
        embed.add_field(name=f"{target_emoji} ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", value=f"${target:.2f}", inline=True)
    
    embed.add_field(name="üìä ‡πÄ‡∏õ‡∏¥‡∏î", value=f"${stock_data['open']:.2f}", inline=True)
    embed.add_field(name="üî∫ ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", value=f"${stock_data['high']:.2f}", inline=True)
    embed.add_field(name="üîª ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", value=f"${stock_data['low']:.2f}", inline=True)
    
    return embed

@tasks.loop(minutes=1)
async def check_stocks():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"""
    current_time = datetime.now()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≤‡∏î (9:30-16:00 EST)
    if current_time.weekday() > 4:  # ‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå-‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
        return
        
    channel = bot.get_channel(CHANNEL_ID)
    if not isinstance(channel, discord.TextChannel):
        logger.warning("‚ö†Ô∏è Channel ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    logger.info("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏∏‡πâ‡∏ô...")
    
    for user_id, stocks in user_targets.items():
        user_settings_data = get_user_settings(user_id)
        
        if not user_settings_data.get('notifications', True):
            continue
            
        for symbol, stock_info in stocks.items():
            target = stock_info['target']
            alert_type = stock_info.get('type', 'below')  # below, above, both
            
            stock_data = await get_stock_price(symbol)
            if not stock_data:
                continue
                
            current_price = stock_data['current']
            should_alert = False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            if alert_type == 'below' and current_price <= target:
                should_alert = True
                alert_msg = f"üìâ ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö"
            elif alert_type == 'above' and current_price >= target:
                should_alert = True
                alert_msg = f"üìà ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö"
            elif alert_type == 'both':
                if abs(current_price - target) / target <= 0.02:  # ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 2%
                    should_alert = True
                    alert_msg = f"üéØ ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á"
            
            if should_alert:
                try:
                    user = await bot.fetch_user(user_id)
                    
                    # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤
                    if user_id in last_alerts and symbol in last_alerts[user_id]:
                        try:
                            await last_alerts[user_id][symbol].delete()
                        except discord.NotFound:
                            pass
                    
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á embed
                    embed = create_stock_embed(stock_data, target)
                    embed.title = f"‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏∏‡πâ‡∏ô {symbol}"
                    embed.description = f"{user.mention} ‡∏´‡∏∏‡πâ‡∏ô {symbol} {alert_msg} ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ${target:.2f}"
                    
                    msg = await channel.send(embed=embed)
                    
                    # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    if user_id not in last_alerts:
                        last_alerts[user_id] = {}
                    last_alerts[user_id][symbol] = msg
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                    alert_history.append({
                        'user_id': user_id,
                        'symbol': symbol,
                        'price': current_price,
                        'target': target,
                        'type': alert_type,
                        'timestamp': datetime.now().isoformat()
                    })
                    
                except Exception as e:
                    logger.error(f"‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

@bot.command(name="set", aliases=['s'])
async def set_target(ctx, symbol: str, target: float, alert_type: str = "below"):
    """‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô: !set AAPL 150 below"""
    symbol = symbol.upper()
    
    if alert_type not in ['below', 'above', 'both']:
        await ctx.send("‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: `below`, `above`, ‡∏´‡∏£‡∏∑‡∏≠ `both`")
        return
    
    if ctx.author.id not in user_targets:
        user_targets[ctx.author.id] = {}
    
    user_targets[ctx.author.id][symbol] = {
        'target': target,
        'type': alert_type,
        'created': datetime.now().isoformat()
    }
    
    save_data()
    
    embed = discord.Embed(
        title="‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        description=f"‡∏´‡∏∏‡πâ‡∏ô **{symbol}** ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ **${target:.2f}** ({alert_type})",
        color=discord.Color.green()
    )
    await ctx.send(embed=embed)

@bot.command(name="all", aliases=['list', 'l'])
async def show_targets(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    targets = user_targets.get(ctx.author.id, {})
    if not targets:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏•‡∏¢")
        return
    
    embed = discord.Embed(
        title=f"üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á {ctx.author.display_name}",
        color=discord.Color.blue()
    )
    
    for symbol, info in targets.items():
        target = info['target']
        alert_type = info['type']
        created = datetime.fromisoformat(info['created']).strftime('%d/%m/%Y')
        embed.add_field(
            name=f"üìà {symbol}",
            value=f"‡πÄ‡∏õ‡πâ‡∏≤: ${target:.2f}\n‡πÅ‡∏à‡πâ‡∏á: {alert_type}\n‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {created}",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command(name="check", aliases=['c'])
async def check_stock(ctx, symbol: str):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô: !check AAPL"""
    symbol = symbol.upper()
    
    async with ctx.typing():
        stock_data = await get_stock_price(symbol)
        
    if not stock_data:
        await ctx.send(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {symbol}")
        return
    
    target = None
    if ctx.author.id in user_targets and symbol in user_targets[ctx.author.id]:
        target = user_targets[ctx.author.id][symbol]['target']
    
    embed = create_stock_embed(stock_data, target)
    await ctx.send(embed=embed)

@bot.command(name="remove", aliases=['rm', 'del'])
async def remove_target(ctx, symbol: str):
    """‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô: !remove AAPL"""
    symbol = symbol.upper()
    
    if ctx.author.id in user_targets and symbol in user_targets[ctx.author.id]:
        del user_targets[ctx.author.id][symbol]
        save_data()
        
        embed = discord.Embed(
            title="üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            description=f"‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ **{symbol}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
            color=discord.Color.orange()
        )
        await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ")

@bot.command(name="settings")
async def user_settings_cmd(ctx, setting: str = None, value: str = None):
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: !settings notifications on"""
    user_id = ctx.author.id
    settings = get_user_settings(user_id)
    
    if not setting:
        embed = discord.Embed(title="‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", color=discord.Color.blue())
        for key, val in settings.items():
            embed.add_field(name=key, value=val, inline=True)
        await ctx.send(embed=embed)
        return
    
    if setting == "notifications":
        if value in ['on', 'true', '1']:
            settings['notifications'] = True
            await ctx.send("üîî ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        elif value in ['off', 'false', '0']:
            settings['notifications'] = False
            await ctx.send("üîï ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
        else:
            await ctx.send("‚ùå ‡πÉ‡∏ä‡πâ on/off")
    
    save_data()

@bot.command(name="history", aliases=['h'])
async def show_history(ctx, limit: int = 10):
    """‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"""
    user_alerts = [a for a in alert_history if a['user_id'] == ctx.author.id]
    
    if not user_alerts:
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô")
        return
    
    embed = discord.Embed(title="üìã ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", color=discord.Color.purple())
    
    for alert in user_alerts[-limit:]:
        timestamp = datetime.fromisoformat(alert['timestamp']).strftime('%d/%m %H:%M')
        embed.add_field(
            name=f"{alert['symbol']} - {timestamp}",
            value=f"‡∏£‡∏≤‡∏Ñ‡∏≤: ${alert['price']:.2f}\n‡πÄ‡∏õ‡πâ‡∏≤: ${alert['target']:.2f}",
            inline=True
        )
    
    await ctx.send(embed=embed)

@bot.command(name="help", aliases=['h'])
async def show_help(ctx):
    """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    embed = discord.Embed(
        title="ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Stock Alert Bot",
        description="Bot ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô",
        color=discord.Color.gold()
    )
    
    commands_list = [
        ("!set <symbol> <price> [type]", "‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô (type: below/above/both)"),
        ("!check <symbol>", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏∏‡πâ‡∏ô"),
        ("!all", "‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"),
        ("!remove <symbol>", "‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô"),
        ("!settings [key] [value]", "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"),
        ("!history [limit]", "‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"),
        ("!help", "‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
    ]
    
    for cmd, desc in commands_list:
        embed.add_field(name=cmd, value=desc, inline=False)
    
    await ctx.send(embed=embed)

@bot.event
async def on_ready():
    logger.info(f"‚úÖ {bot.user} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
    load_data()
    check_stocks.start()

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.CommandNotFound):
        await ctx.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ ‡πÉ‡∏ä‡πâ `!help` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    else:
        logger.error(f"Command error: {error}")
        await ctx.send("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

if __name__ == "__main__":
    if DISCORD_TOKEN:
        try:
            bot.run(DISCORD_TOKEN)
        except KeyboardInterrupt:
            logger.info("üõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            save_data()
    else:
        logger.error("‚ùå DISCORD_TOKEN ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
