"""
main.py
Discord Stock Alert Bot (single-file)
- Commands: /set, /check, /all (slash commands)
- Messages: ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á)
- Supports: US stocks and Thai (.BK)
- Persistence: targets.json
- Auto-check interval: 5 minutes (configurable)
"""

import discord
from discord import app_commands, ui
from discord.ext import tasks
import yfinance as yf
import json
import os
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timezone

# -----------------------
# Basic configuration
# -----------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("stockbot")

# ‡πÉ‡∏™‡πà DISCORD_TOKEN ‡πÉ‡∏ô environment variable ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN", None)  # ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ô
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ô
if not DISCORD_TOKEN:
    logger.warning("DISCORD_TOKEN ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô environment variable")

# ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
DATA_FILE = "targets.json"

# ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô seconds/minutes ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
CHECK_INTERVAL_MINUTES = 5

# -----------------------
# Discord client + tree
# -----------------------
intents = discord.Intents.default()
# ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î message_content ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ slash commands
intents.message_content = True  # ‡∏ö‡∏≤‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå interactive ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ True ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô
client = discord.Client(intents=intents)
tree = app_commands.CommandTree(client)

# -----------------------
# In-memory structure
# -----------------------
# ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö targets:
# {
#   "<user_id>": {
#       "<SYMBOL>": {
#           "target": float,
#           "dm": bool,
#           "channel_id": int or None,
#           "last_msg": {"channel_id": int, "message_id": int, "timestamp": "iso"} or None,
#           "created_at": "iso"
#       },
#       ...
#   },
#   ...
# }
targets: Dict[str, Dict[str, Dict[str, Any]]] = {}

# -----------------------
# Persistence helpers
# -----------------------
def load_targets():
    global targets
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                targets = json.load(f)
            logger.info("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏≤‡∏Å %s ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", DATA_FILE)
        except (IOError, json.JSONDecodeError) as e:
            logger.error("‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå targets ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %s", e)
            targets = {}
    else:
        targets = {}
        logger.info("‡πÑ‡∏ü‡∏•‡πå targets.json ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏•‡πà‡∏≤")

def save_targets():
    try:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(targets, f, indent=2, ensure_ascii=False)
        logger.debug("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å targets ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    except IOError as e:
        logger.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å targets ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %s", e)

# -----------------------
# Utility helpers
# -----------------------
def normalize_symbol(symbol: str) -> str:
    """
    ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡πÅ‡∏•‡∏∞ trim whitespace
    ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° .BK ‡πÄ‡∏≠‡∏á (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    """
    return symbol.strip().upper()

def safe_float(v) -> Optional[float]:
    try:
        return float(v)
    except (TypeError, ValueError):
        return None

def iso_now() -> str:
    return datetime.now(timezone.utc).isoformat()

# -----------------------
# Market data helpers
# -----------------------
def get_price(symbol: str) -> Optional[float]:
    """‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (intraday close) ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ yfinance"""
    try:
        ticker = yf.Ticker(symbol)
        # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠ fallback
        data = ticker.history(period="1d", interval="1d")
        if data is None or data.empty:
            logger.debug("yfinance: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö %s", symbol)
            return None
        last_close = data["Close"].iloc[-1]
        return float(last_close)
    except Exception as e:
        logger.error("get_price error for %s: %s", symbol, e, exc_info=True)
        return None

def fetch_history(symbol: str, days: int = 60):
    """‡∏î‡∏∂‡∏á history ‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô DataFrame"""
    try:
        ticker = yf.Ticker(symbol)
        df = ticker.history(period=f"{days}d")
        if df is None or df.empty:
            return None
        return df
    except Exception as e:
        logger.error("fetch_history error for %s: %s", symbol, e, exc_info=True)
        return None

# -----------------------
# Advanced Support/Resistance calculation
# -----------------------
def calc_support(symbol: str) -> Optional[float]:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (weighted lows + trend + volatility + candle gap)
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏≠
    """
    df = fetch_history(symbol, days=90)
    if df is None or len(df) < 20:
        return None
    try:
        low5 = df["Low"][-5:].min()
        low10 = df["Low"][-10:].min()
        low20 = df["Low"][-20:].min()
        ma20 = float(df["Close"][-20:].mean())
        ma50 = float(df["Close"][-50:].mean()) if len(df) >= 50 else ma20
        std20 = float(df["Close"][-20:].std())
        current = float(df["Close"].iloc[-1])

        vol_factor = std20 / current if current != 0 else 0.0
        trend_factor = 0.01 if ma20 > ma50 else -0.01

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏ß‡∏á‡∏´‡∏ô‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (gap down / big red candle)
        last_open = float(df["Open"].iloc[-1])
        last_close = float(df["Close"].iloc[-1])
        last_drop_pct = (last_close - last_open) / last_open if last_open != 0 else 0.0
        gap_factor = 0.02 if last_drop_pct < -0.03 else (0.01 if last_drop_pct < -0.015 else 0.0)

        weighted_low = (0.45 * low5) + (0.35 * low10) + (0.2 * low20)

        # base support ‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° volatility & trend & gap
        support = weighted_low * (1 - (vol_factor * 0.5) + trend_factor - gap_factor)

        # safety floor: ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏ä‡πà‡∏ô‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 0
        support = max(support, 0.0)
        return round(support, 2)
    except Exception as e:
        logger.error("calc_support error for %s: %s", symbol, e, exc_info=True)
        return None

def calc_resistance(symbol: str) -> Optional[float]:
    """
    ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (weighted highs + trend + volatility + gap up)
    """
    df = fetch_history(symbol, days=90)
    if df is None or len(df) < 20:
        return None
    try:
        high5 = df["High"][-5:].max()
        high10 = df["High"][-10:].max()
        high20 = df["High"][-20:].max()
        ma20 = float(df["Close"][-20:].mean())
        ma50 = float(df["Close"][-50:].mean()) if len(df) >= 50 else ma20
        std20 = float(df["Close"][-20:].std())
        current = float(df["Close"].iloc[-1])

        vol_factor = std20 / current if current != 0 else 0.0
        trend_factor = 0.01 if ma20 > ma50 else -0.01

        last_open = float(df["Open"].iloc[-1])
        last_close = float(df["Close"].iloc[-1])
        last_gain_pct = (last_close - last_open) / last_open if last_open != 0 else 0.0
        gap_factor = 0.02 if last_gain_pct > 0.03 else (0.01 if last_gain_pct > 0.015 else 0.0)

        weighted_high = (0.45 * high5) + (0.35 * high10) + (0.2 * high20)

        resistance = weighted_high * (1 + (vol_factor * 0.5) + trend_factor + gap_factor)
        resistance = max(resistance, 0.0)
        return round(resistance, 2)
    except Exception as e:
        logger.error("calc_resistance error for %s: %s", symbol, e, exc_info=True)
        return None

# -----------------------
# Message / Embed builders (‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢)
# -----------------------
def build_target_embed(user_name: str, symbol: str, price: Optional[float], target: float,
                       support: Optional[float], resistance: Optional[float]) -> discord.Embed:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    title = f"üìà ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {symbol}"
    description_lines = []
    description_lines.append(f"‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤: **{user_name}**")
    if price is not None:
        description_lines.append(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{price:.2f}**")
    else:
        description_lines.append("üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**")
    description_lines.append(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ: **{target}**")
    if support is not None:
        description_lines.append(f"üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì): **{support}**")
    if resistance is not None:
        description_lines.append(f"üìà ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô (‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì): **{resistance}**")
    description_lines.append(f"‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    embed = discord.Embed(title=title,
                          description="\n".join(description_lines),
                          color=discord.Color.blue())
    embed.set_footer(text="Stock Alert Bot ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Yahoo Finance (yfinance)")
    return embed

def build_check_embed(user_name: str, symbol: str, price: Optional[float], support: Optional[float],
                      resistance: Optional[float], target: Optional[float]) -> discord.Embed:
    title = f"üîé ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô {symbol}"
    desc = []
    if price is None:
        desc.append("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏î‡πâ")
    else:
        desc.append(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{price:.2f}**")
    if target is not None:
        desc.append(f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: **{target}**")
    if support is not None:
        desc.append(f"üìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: **{support}**")
    if resistance is not None:
        desc.append(f"üìà ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì: **{resistance}**")
    desc.append(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    embed = discord.Embed(title=title, description="\n".join(desc), color=discord.Color.dark_gold())
    return embed

# -----------------------
# UI: Modal for set-new-target (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° '‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà')
# -----------------------
class NewTargetModal(ui.Modal, title="‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà"):
    stock_field = ui.TextInput(label="‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏ä‡πà‡∏ô AAPL ‡∏´‡∏£‡∏∑‡∏≠ PTT.BK)", placeholder="AAPL", required=True)
    target_field = ui.TextInput(label="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", placeholder="170", required=True)

    def __init__(self, user_id: str):
        super().__init__()
        self.user_id = user_id  # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏á submit

    async def on_submit(self, interaction: discord.Interaction):
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠ user submit modal
        symbol = normalize_symbol(self.stock_field.value)
        try:
            target_val = float(self.target_field.value)
        except ValueError:
            await interaction.response.send_message("‚ùå ‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", ephemeral=True)
            return

        # ‡∏ñ‡πâ‡∏≤ user ‡πÑ‡∏°‡πà‡∏°‡∏µ record ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
        if self.user_id not in targets:
            targets[self.user_id] = {}
        # channel id ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≤‡∏Å interaction.channel ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô DM ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô DM channel
        channel_id = interaction.channel.id if interaction.channel is not None else None
        targets[self.user_id][symbol] = {
            "target": target_val,
            "dm": True if isinstance(interaction.channel, discord.DMChannel) else False,
            "channel_id": channel_id,
            "last_msg": None,
            "created_at": iso_now()
        }
        save_targets()
        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô {symbol} ‡∏ó‡∏µ‡πà {target_val} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏ú‡πà‡∏≤‡∏ô modal)", ephemeral=True)

# -----------------------
# View (Buttons) - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
# -----------------------
class StockView(ui.View):
    def __init__(self, user_id: str, symbol: str):
        super().__init__(timeout=None)
        self.user_id = user_id
        self.symbol = symbol

    @ui.button(label="üìä ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏≤‡∏Ñ‡∏≤", style=discord.ButtonStyle.primary, custom_id="check_price")
    async def check_price_button(self, interaction: discord.Interaction, button: ui.Button):
        # ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á Embed ‡∏Ç‡∏≠‡∏á‡∏´‡∏∏‡πâ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (ephemeral)
        price = get_price(self.symbol)
        support = calc_support(self.symbol)
        resistance = calc_resistance(self.symbol)
        # target ‡∏Ç‡∏≠‡∏á user ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        user_targets = targets.get(str(self.user_id), {})
        target_val = user_targets.get(self.symbol, {}).get("target")
        embed = build_check_embed(interaction.user.display_name, self.symbol, price, support, resistance, target_val)
        await interaction.response.send_message(embed=embed, ephemeral=True)

    @ui.button(label="üéØ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà", style=discord.ButtonStyle.secondary, custom_id="set_new")
    async def set_new_button(self, interaction: discord.Interaction, button: ui.Button):
        # ‡πÄ‡∏õ‡∏¥‡∏î modal ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
        if str(interaction.user.id) != str(self.user_id):
            await interaction.response.send_message("‚ö†Ô∏è ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return
        modal = NewTargetModal(self.user_id)
        await interaction.response.send_modal(modal)

    @ui.button(label="‚ùå ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", style=discord.ButtonStyle.danger, custom_id="delete_target")
    async def delete_button(self, interaction: discord.Interaction, button: ui.Button):
        if str(interaction.user.id) != str(self.user_id):
            await interaction.response.send_message("‚ö†Ô∏è ‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô", ephemeral=True)
            return
        user_targets = targets.get(str(self.user_id), {})
        if self.symbol in user_targets:
            del user_targets[self.symbol]
            save_targets()
            await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á `{self.symbol}` ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        else:
            await interaction.response.send_message("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)

# -----------------------
# Slash commands (English names) - responses in Thai
# -----------------------
@tree.command(name="set", description="Set a stock target")
@app_commands.describe(stock="Stock symbol, e.g. AAPL or PTT.BK", target="Target price (number)", dm="Send DM? (true => DM, false => post in this channel)")
async def cmd_set(interaction: discord.Interaction, stock: str, target: float, dm: bool = True):
    """
    ‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    - ‡∏´‡∏≤‡∏Å dm=True => ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏≤‡∏á DM
    - ‡∏´‡∏≤‡∏Å dm=False => ‡∏ö‡∏≠‡∏ó‡∏à‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô Channel ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á (recorded channel)
    """
    await interaction.response.defer(ephemeral=True)
    user_id = str(interaction.user.id)
    symbol = normalize_symbol(stock)

    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ï‡∏¥‡∏° .BK ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö ‡πÅ‡∏ï‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
    if symbol.endswith(".BK") is False and any(ch.isalpha() for ch in symbol) and symbol.isalpha():
        # It's likely US symbol; do nothing. For Thai, user must include .BK.
        pass

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    if user_id not in targets:
        targets[user_id] = {}

    # ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡πà‡∏≠‡∏á (channel_id) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠ dm=False
    channel_id = None
    if not dm:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô DM, channel ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô DMChannel ‡∏ã‡∏∂‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ï‡πà‡∏≠ ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô None
        if interaction.channel is not None and not isinstance(interaction.channel, discord.DMChannel):
            channel_id = interaction.channel.id
        else:
            # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å DM ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á dm=False ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å Server channel
            await interaction.followup.send("‚ùó ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô Channel ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà DM) ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡πâ‡∏á dm=true", ephemeral=True)
            return

    targets[user_id][symbol] = {
        "target": float(target),
        "dm": bool(dm),
        "channel_id": channel_id,
        "last_msg": None,
        "created_at": iso_now()
    }

    save_targets()
    # ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ (ephemeral ‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô)
    await interaction.followup.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô `{symbol}` ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ {target} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô {'DM' if dm else '‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏ä‡∏ó'})", ephemeral=True)

@tree.command(name="check", description="Check your saved targets")
async def cmd_check(interaction: discord.Interaction):
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô Embed ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    user_id = str(interaction.user.id)
    if user_id not in targets or not targets[user_id]:
        await interaction.response.send_message("‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏î ‡πÜ", ephemeral=True)
        return

    embed = discord.Embed(title="üìä ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", color=discord.Color.blue())
    for symbol, info in targets[user_id].items():
        price = get_price(symbol)
        support = calc_support(symbol)
        resistance = calc_resistance(symbol)
        price_text = f"{price:.2f}" if price is not None else "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        support_text = f"{support}" if support is not None else "-"
        resistance_text = f"{resistance}" if resistance is not None else "-"
        field_value = f"üéØ ‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: **{info['target']}**\nüí∞ ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: **{price_text}**\nüìâ ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö: **{support_text}** | üìà ‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô: **{resistance_text}**"
        embed.add_field(name=symbol, value=field_value, inline=False)

    # ‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö ephemeral ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô
    # ‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πà‡∏°‡∏ä‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á (‡πÉ‡∏ä‡πâ symbol ‡πÅ‡∏•‡∏∞ user_id ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠ view)
    # ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÅ‡∏ô‡∏ö view ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ö‡∏ô message
    await interaction.response.send_message(embed=embed, ephemeral=True)

@tree.command(name="all", description="View all saved targets (admin-style)")
async def cmd_all(interaction: discord.Interaction):
    """
    ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏£‡∏∏‡∏õ (ephemeral)
    ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó/‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡∏à‡∏∞‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    """
    if not targets:
        await interaction.response.send_message("‚ÑπÔ∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏∏‡πâ‡∏ô‡πÉ‡∏î ‡πÜ", ephemeral=True)
        return

    embed = discord.Embed(title="üì¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", color=discord.Color.green())
    for user_id, user_targets in targets.items():
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á display name ‡∏Ç‡∏≠‡∏á user ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        try:
            user = client.get_user(int(user_id)) or await client.fetch_user(int(user_id))
            display = user.display_name
        except Exception:
            display = f"User {user_id}"
        summary_lines = []
        for sym, info in user_targets.items():
            dm_flag = "DM" if info.get("dm") else "Channel"
            summary_lines.append(f"{sym} @ {info.get('target')} ({dm_flag})")
        embed.add_field(name=f"{display}", value="\n".join(summary_lines)[:1024], inline=False)

    await interaction.response.send_message(embed=embed, ephemeral=True)

# -----------------------
# Auto-check loop: ‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏∏‡∏Å ‡πÜ CHECK_INTERVAL_MINUTES
# -----------------------
@tasks.loop(minutes=CHECK_INTERVAL_MINUTES)
async def auto_check_loop():
    logger.debug("Auto check loop running - users=%d", len(targets))
    # ‡∏ó‡∏≥‡∏™‡∏≥‡πÄ‡∏ô‡∏≤ keys ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô modification ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á loop
    for user_id in list(targets.keys()):
        user_targets = targets.get(user_id, {})
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏°
        if not user_targets:
            continue
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° fetch user object
        try:
            user = client.get_user(int(user_id)) or await client.fetch_user(int(user_id))
        except Exception as e:
            logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á user %s: %s", user_id, e)
            continue

        for symbol, info in list(user_targets.items()):
            try:
                price = get_price(symbol)
                # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
                if price is None:
                    logger.debug("‡∏£‡∏≤‡∏Ñ‡∏≤ %s ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user %s", symbol, user_id)
                    continue

                target_val = safe_float(info.get("target"))
                if target_val is None:
                    logger.warning("Target invalid for %s/%s", user_id, symbol)
                    continue

                # ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠)
                if price <= target_val:
                    support = calc_support(symbol)
                    resistance = calc_resistance(symbol)

                    embed = build_target_embed(user.display_name, symbol, price, target_val, support, resistance)

                    view = StockView(user_id, symbol)

                    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô (cleanup)
                    last_msg = info.get("last_msg")
                    if last_msg and isinstance(last_msg, dict):
                        old_ch = last_msg.get("channel_id")
                        old_mid = last_msg.get("message_id")
                        try:
                            if old_ch and old_mid:
                                ch_obj = client.get_channel(int(old_ch)) or await client.fetch_channel(int(old_ch))
                                if ch_obj:
                                    old_msg = await ch_obj.fetch_message(int(old_mid))
                                    if old_msg:
                                        await old_msg.delete()
                        except Exception:
                            # ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß) ‚Äî ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                            logger.debug("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á %s %s ‡πÑ‡∏î‡πâ", user_id, symbol)

                    # ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏ñ‡πâ‡∏≤ user ‡∏ï‡∏±‡πâ‡∏á dm=True => ‡∏™‡πà‡∏á DM, ‡∏ñ‡πâ‡∏≤ dm=False => ‡∏™‡πà‡∏á‡πÉ‡∏ô channel_id ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                    sent_message = None
                    if info.get("dm", True):
                        try:
                            dm_ch = await user.create_dm()
                            sent_message = await dm_ch.send(embed=embed, view=view)
                        except Exception as e:
                            logger.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡πÉ‡∏´‡πâ user %s: %s", user_id, e)
                            # ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á DM ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à fallback ‡πÑ‡∏õ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏ô channel ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ channel_id ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
                            channel_id = info.get("channel_id")
                            if channel_id:
                                try:
                                    ch_obj = client.get_channel(int(channel_id)) or await client.fetch_channel(int(channel_id))
                                    if ch_obj:
                                        sent_message = await ch_obj.send(content=f"<@{user_id}>", embed=embed, view=view)
                                except Exception as e2:
                                    logger.error("fallback post to channel failed: %s", e2)
                    else:
                        # ‡∏™‡πà‡∏á‡πÉ‡∏ô channel ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (channel_id) ‚Äî ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á log
                        channel_id = info.get("channel_id")
                        if channel_id:
                            try:
                                ch_obj = client.get_channel(int(channel_id)) or await client.fetch_channel(int(channel_id))
                                if ch_obj:
                                    sent_message = await ch_obj.send(content=f"<@{user_id}>", embed=embed, view=view)
                            except Exception as e:
                                logger.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á notification ‡πÉ‡∏ô channel %s: %s", channel_id, e)
                        else:
                            logger.info("user %s ‡∏ï‡∏±‡πâ‡∏á dm=False ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å channel_id; ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á", user_id)

                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å last_msg (channel_id, message_id, timestamp)
                    if sent_message is not None:
                        try:
                            targets[user_id][symbol]["last_msg"] = {
                                "channel_id": sent_message.channel.id,
                                "message_id": sent_message.id,
                                "timestamp": iso_now()
                            }
                            save_targets()
                        except Exception as e:
                            logger.error("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å last_msg ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: %s", e)

            except Exception as ex:
                logger.error("Auto-check inner error for %s %s: %s", user_id, symbol, ex, exc_info=True)

# -----------------------
# Ready event
# -----------------------
@client.event
async def on_ready():
    logger.info("Logged in as %s ‚Äî syncing commands...", client.user)
    load_targets()
    try:
        await tree.sync()
    except Exception as e:
        logger.warning("Command tree sync warning: %s", e)
    # ‡πÄ‡∏£‡∏¥‡πà‡∏° loop ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if not auto_check_loop.is_running():
        auto_check_loop.start()
    logger.info("Bot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‚Äî ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å %d ‡∏ô‡∏≤‡∏ó‡∏µ", CHECK_INTERVAL_MINUTES)

# -----------------------
# Run bot
# -----------------------
if __name__ == "__main__":
    if DISCORD_TOKEN:
        client.run(DISCORD_TOKEN)
    else:
        logger.error("DISCORD_TOKEN ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ‚Äî ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
